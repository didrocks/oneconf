#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (C) 2010 Canonical
#
# Authors:
#  Didier Roche <didrocks@ubuntu.com>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA


import logging
from optparse import OptionParser
import sys
from time import localtime, strftime

import gettext
from gettext import gettext as _

from oneconf.version import *

def print_packages(installed_pkg_by_host, removed_pkg_by_host=None):
    hostid_list = set(installed_pkg_by_host)
    if removed_pkg_by_host:
        hostid_list = hostid_list.union(set(removed_pkg_by_host))

    for hostid in hostid_list:
        if installed_pkg_by_host and hostid in installed_pkg_by_host:
            print "Packages for %s:" % hostid
            print " Installed app:"
            for pkg_name in installed_pkg_by_host[hostid]:
                pkg = installed_pkg_by_host[hostid][pkg_name]
                print"  %s: %s" % (pkg_name, strftime("%a, %d %b %Y %H:%M:%S",
                                  localtime(pkg.last_modification)))
        if removed_pkg_by_host and hostid in removed_pkg_by_host:
            print " Removed app:"
            for pkg_name in removed_pkg_by_host[hostid]:
                pkg = removed_pkg_by_host[hostid][pkg_name]
                print"  %s: %s" % (pkg_name, strftime("%a, %d %b %Y %H:%M:%S",
                                  localtime(pkg.last_modification)))


def print_packages_diff(additional_pkg_by_host, missing_pkg_by_host):

    for hostid in additional_pkg_by_host:
        print " Additional packages on %s: (package to install)" % hostid
        for pkg_name in additional_pkg_by_host[hostid]:
            time_added_on_hostid = additional_pkg_by_host[hostid][pkg_name]
            message = "  %s: added on %s" % (pkg_name,
                      strftime("%a, %d %b %Y %H:%M:%S",
                      localtime(time_added_on_hostid)))
            print message
        print " Missing packages on %s: (package to remove)" % hostid
        for pkg_name in missing_pkg_by_host[hostid]:
            time_removed_on_hostid = missing_pkg_by_host[hostid][pkg_name]
            message = "  %s: " % pkg_name
            if time_removed_on_hostid:
                message += "remotely removed on %s " % \
                          strftime("%a, %d %b %Y %H:%M:%S",
                          localtime(time_removed_on_hostid))
            else:
                message += "has never been present remotely"
            print message


def print_hosts(hosts):
    print "Hosts stored for OneConf:"
    for hostid in hosts:
        print "%s with ID: %s" % (hosts[hostid], hostid)

if __name__ == '__main__':
    
    usage = _("usage: oneconf-service [options]")
    parser = OptionParser(prog='oneconf-service', version= "oneconf-service "
                          + VERSION, usage=usage)
    parser.add_option("-d", "--debug", dest="debug", action="store_true",
                      help=_("enable debug mode"), default=False)
    parser.add_option("-a", "--get-all", dest="getall", action="store_true",
                      help=_("get all relevant packages from storage"),
                      default=False)
    parser.add_option("--diff", dest="diff", action="store_true",
                      help=_("Current diff between this machine and another " \
                             "provided by hostname/hostid"),
                      default=False)
    parser.add_option("-g", "--get-appscodec", dest="getappscodec",
                      action="store_true",
                      help=_("Print automated apps and codec not installed " \
                             "by default, from storage"), default=False)
    parser.add_option("--gethosts", dest="gethosts", action="store_true",
                      help=_("Print all available hosts to OneConf"),
                      default=False)
    parser.add_option("--hostname", dest="hostname", action="store",
                      help=_("specify target host"),
                      default=None)
    parser.add_option("--hostid", dest="hostid", action="store",
                      help=_("specify target host"),
                      default=None)
    parser.add_option("-u", "--update", dest="update", action="store_true",
                      help=_("update the package list in couchdb"),
                      default=False)
    parser.add_option("--direct", dest="directaccess", action="store_true",
                      help=_("don't use dbus for the request (default as in debugging phase)"),
                      default=True)
    (options, args) = parser.parse_args()

    # set verbosity
    if options.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if options.directaccess:
        logging.debug("Direct call")
        from oneconf.directconnect import DirectConnect
        oneconf = DirectConnect()
    else:
        logging.debug("Using dbus")
        #oneconf = ...
        pass

    packages = None

    if options.hostid and options.hostname:
        print _("hostid and hostname can't be provided together")
        sys.exit(1)

    if options.gethosts:
        from oneconf.hosts import Hosts
        print_hosts(Hosts().get_all_hosts())
    elif options.update:
        if options.hostid or options.hostname:
            print _("You can't use hostid or hostname when updating")
            sys.exit(1)
        packages = oneconf.update()
    elif options.getappscodec:
        installed_app_codec = oneconf.get_appscodec(hostid=options.hostid,
                                                    hostname=options.hostname)
        print_packages(installed_app_codec)
    elif options.getall:
        (manually_installed_pkg, removed_pkg) = oneconf.get_all(
                hostid=options.hostid, hostname=options.hostname)
        print_packages(manually_installed_pkg, removed_pkg)
    elif options.diff:
        if not options.hostid and not options.hostname:
            print _("You have to provide either hostid or hostname for getting " \
                    "a diff")
            sys.exit(1)        
        (additional_pkg, missing_pkg) = oneconf.diff(
                hostid=options.hostid, hostname=options.hostname)
        print_packages_diff(additional_pkg, missing_pkg)
    else:
        print _("Do nothing, really?")
        sys.exit(1)

    sys.exit(0)

