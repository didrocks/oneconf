#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (C) 2010 Canonical
# Author: Didier Roche <didrocks@ubuntu.com>
# This program is free software: you can redistribute it and/or modify it 
# under the terms of the GNU General Public License version 3, as published 
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranties of 
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR 
# PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along 
# with this program.  If not, see <http://www.gnu.org/licenses/>.

import logging
from optparse import OptionParser
import sys
from time import localtime, strftime

import gettext
from gettext import gettext as _

from softwarecenter.version import *

def print_packages(installed_app_codec, removed_app_codec):
    print "Installed app:"
    for pkg_name in installed_app_codec:
        print("%s: %s" % (pkg_name, strftime("%a, %d %b %Y %H:%M:%S",
                          localtime(installed_app_codec[pkg_name]))))
    print "Removed app:"
    for pkg_name in removed_app_codec:
        print("%s: %s" % (pkg_name, strftime("%a, %d %b %Y %H:%M:%S",
                          localtime(removed_app_codec[pkg_name]))))

def print_hosts(hosts):
    print "Hosts stored for OneConf:"
    for hostid in hosts:
        print "%s with ID: %s" % (hosts[hostid], hostid)

if __name__ == '__main__':
    
    usage = _("usage: oneconf-service [options]")
    parser = OptionParser(prog='oneconf-service', version= "oneconf-service "
                          + VERSION, usage=usage)
    parser.add_option("-d", "--debug", dest="debug", action="store_true",
                      help=_("enable debug mode"), default=False)
    parser.add_option("-a", "--get-all", dest="getall", action="store_true",
                      help=_("get all packages from couchdb"),
                      default=False)
    parser.add_option("-g", "--get-appscodec", dest="getappscodec",
                      action="store_true",
                      help=_("Print automated apps and codec not installed " \
                             "by default, from couchdb"), default=False)
    parser.add_option("--gethosts", dest="gethosts", action="store_true",
                      help=_("Print all available hosts to OneConf"),
                      default=False)
    parser.add_option("--hostname", dest="hostname", action="store",
                      help=_("specify target host"),
                      default=False)
    parser.add_option("--hostid", dest="hostid", action="store",
                      help=_("specify target host"),
                      default=False)
    parser.add_option("-u", "--update", dest="update", action="store_true",
                      help=_("update the package list in couchdb"),
                      default=False)
    parser.add_option("--direct", dest="directaccess", action="store_true",
                      help=_("don't use dbus for the request"),
                      default=True)
    (options, args) = parser.parse_args()

    # set verbosity
    if options.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if options.directaccess:
        logging.debug("Direct call")
        from oneconf.packagesethandler import PackageSetHandler
        oneconf = PackageSetHandler()
    else:
        logging.debug("Using dbus")
        #oneconf = ...
        pass

    packages = None

    if options.gethosts:
        from oneconf.hosts import Hosts
        print_hosts(Hosts().get_all_hosts())
    elif options.update:
        packages = oneconf.update()
    elif options.getappscodec:
        (installed_app_codec, removed_app_codec) = oneconf.getappscodec()
        print_packages(installed_app_codec, removed_app_codec)
    else:
        (installed_pkg, removed_pkg) = oneconf.getall()
        print_packages(installed_pkg, removed_pkg)

    # print packages if some available
    if packages:
        pass

    sys.exit(0)

