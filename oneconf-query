#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (C) 2010 Canonical
#
# Authors:
#  Didier Roche <didrocks@ubuntu.com>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA


import logging
from optparse import OptionParser, OptionGroup
import sys
from time import localtime, strftime

import gettext
from gettext import gettext as _

from oneconf.version import *

SCOPE_NONE, SCOPE_SELECTION, SCOPE_ALL, SCOPE_HOSTS, SCOPE_HOST = range(5)
ACTION_NONE, ACTION_LIST, ACTION_DIFF, ACTION_UPDATE = range(4)


def print_packages(installed_pkg_by_host, removed_pkg_by_host=None):

    if installed_pkg_by_host:
        print "Installed app:"
        for pkg_name in installed_pkg_by_host:
            last_modification = installed_pkg_by_host[pkg_name]
            print" %s: %s" % (pkg_name, strftime("%a, %d %b %Y %H:%M:%S",
                              localtime(last_modification)))
    if removed_pkg_by_host:
        print "Removed app:"
        for pkg_name in removed_pkg_by_host:
            last_modification = removed_pkg_by_host[pkg_name]
            print" %s: %s" % (pkg_name, strftime("%a, %d %b %Y %H:%M:%S",
                              localtime(last_modification)))


def print_packages_diff(additional_pkg_by_host, missing_pkg_by_host):

    print "Additional packages: (package to install)"
    for pkg_name in additional_pkg_by_host:
        time_added_on_hostid = additional_pkg_by_host[pkg_name]
        message = "  %s: added on %s" % (pkg_name,
                  strftime("%a, %d %b %Y %H:%M:%S",
                  localtime(time_added_on_hostid)))
        print message
    print "Missing packages: (package to remove)"
    for pkg_name in missing_pkg_by_host:
        time_removed_on_hostid = missing_pkg_by_host[pkg_name]
        message = "  %s: " % pkg_name
        if time_removed_on_hostid:
            message += "remotely removed on %s " % \
                      strftime("%a, %d %b %Y %H:%M:%S",
                      localtime(time_removed_on_hostid))
        else:
            message += "has never been present remotely"
        print message


def print_hosts(hosts):
    if len(hosts) > 1:
        print "Hosts stored for OneConf:"
    else:
        print "Listing this host stored in OneConf:"
    for hostid in hosts:
        print "%s with ID: %s" % (hosts[hostid], hostid)

def err_scope():
    print _("you can't define --selection, --all or --hosts together.")
    sys.exit(1)

def err_action():
    print _("you can't define --list, --diff or --update together.")
    sys.exit(1)

def option_not_compatible(options, action):
    print _("%s isn't compatible with %s" % (options, action))
    sys.exit(1)

if __name__ == '__main__':
    
    usage = _("usage: %prog [options]")
    parser = OptionParser(version= "%prog " + VERSION, usage=usage)
    parser.add_option("-d", "--diff", action="store_true",
                      dest="action_diff",
                      help=_("Current diff between this machine and another " \
                             "provided by hostname/hostid"))
    parser.add_option("-l", "--list", action="store_true",
                      dest="action_list",
                      help=_("List stored package or host lists (default)"))
    parser.add_option("-u", "--update", action="store_true",
                      dest="action_update",
                      help=_("update the package list in couchdb"))
    parser.add_option("--debug", action="store_true", dest="debug",
                      help=_("enable debug mode (use --direct)"))
    parser.add_option("--direct", action="store_true", dest="directaccess",
                      help=_("don't use dbus for the request"))
    parser.add_option("--nocache", action="store_true", dest="nocache",
                      help=_("ignore cache (for diff command)"))
    scope_group = OptionGroup(parser, "Scope of actions:", "This define the " \
                        "scope to consider for list and diff command.")
    scope_group.add_option("-s", "--selection", action="store_true",
                      dest="scope_selection",
                      help=_("apps and codec manually installed, not present " \
                             "by default (default)"))
    scope_group.add_option("-a", "--all", action="store_true",
                      dest="scope_all",
                      help=_("get all relevant packages from storage"))
    scope_group.add_option("--hosts", action="store_true",
                      dest="scope_hosts",
                      help=_("all available hosts from storage (only with list)"))
    scope_group.add_option("--host", action="store_true",
                      dest="scope_host",
                      help=_("This host (only with list)"))
    scope_hosts = OptionGroup(parser, "Host management:", "Thoses options " \
                      "can't be used together and only concerns diff and " \
                      "list actions. List hosts to get registered strings.")
    # default is '' for dbus compatible format
    scope_hosts.add_option("--hostname", action="store", dest="hostname",
                      help=_("specify target host"), default='')
    scope_hosts.add_option("--hostid", action="store", dest="hostid",
                      help=_("specify target host"), default='')
    parser.add_option_group(scope_group)
    parser.add_option_group(scope_hosts)
    (options, args) = parser.parse_args()

    # set verbosity
    if options.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if options.directaccess or options.debug:
        logging.debug("Direct call")
        from oneconf.directconnect import DirectConnect
        oneconf = DirectConnect()
    else:
        logging.debug("Using dbus")
        from oneconf.dbusconnect import DbusConnect
        oneconf = DbusConnect()


    # store_const doesn't handle conflicts, so use manual triage
    scope = SCOPE_NONE
    if options.scope_selection:
        scope = SCOPE_SELECTION
    if options.scope_all:
        if scope != SCOPE_NONE:
            err_scope()
        scope = SCOPE_ALL
    if options.scope_hosts:
        if scope != SCOPE_NONE:
            err_scope()
        scope = SCOPE_HOSTS
    if options.scope_host:
        if scope != SCOPE_NONE:
            err_scope()
        scope = SCOPE_HOST

    # store_const doesn't handle conflicts, so use manual triage
    action = ACTION_NONE
    if options.action_list:
        action = ACTION_LIST
    if options.action_diff:
        if action != ACTION_NONE:
            err_action()
        action = ACTION_DIFF
    if options.action_update:
        if action != ACTION_NONE:
            err_action()
        action = ACTION_UPDATE
    if action == ACTION_NONE:
        action = ACTION_LIST

    if options.hostid and options.hostname:
        print _("hostid and hostname can't be provided together")
        sys.exit(1)

    if action == ACTION_UPDATE:
        if options.nocache:
            option_not_compatible("--nocache", "--update")
        if options.hostid or options.hostname:
            print _("You can't use hostid or hostname when updating")
            sys.exit(1)
        if scope != SCOPE_NONE:
            print _("You can't define --selection, --all, --host or --hosts " \
                    "when updating")
            sys.exit(1)
        oneconf.update()

    elif action == ACTION_LIST:
        if options.nocache:
            option_not_compatible("--nocache", "--list")
        if scope == SCOPE_NONE:
            scope = SCOPE_SELECTION
        if scope == SCOPE_HOSTS:
            print_hosts(oneconf.get_all_hosts())
        if scope == SCOPE_HOST:
            print_hosts(oneconf.get_current_host())
        elif scope == SCOPE_SELECTION:
            installed_app_codec = oneconf.get_appscodec(hostid=options.hostid,
                                                     hostname=options.hostname)
            print_packages(installed_app_codec)
        elif scope == SCOPE_ALL:
            (manually_installed_pkg, removed_pkg) = oneconf.get_all(
                    hostid=options.hostid, hostname=options.hostname)
            print_packages(manually_installed_pkg, removed_pkg)

    elif action == ACTION_DIFF:
        if not options.hostid and not options.hostname:
            print _("You have to provide either hostid or hostname for " \
                    "getting a diff")
            sys.exit(1)
        if scope == SCOPE_NONE:
            scope = SCOPE_SELECTION
        if scope == SCOPE_HOSTS:
            option_not_compatible("--hosts", "--diff")
        if scope == SCOPE_HOST:
            option_not_compatible("--host", "--diff")
        elif scope == SCOPE_SELECTION:
            (additional_pkg, missing_pkg) = oneconf.diff_appscodec(
                    hostid=options.hostid, hostname=options.hostname,
                    use_cache=(not options.nocache))
        elif scope == SCOPE_ALL:
            (additional_pkg, missing_pkg) = oneconf.diff_all(
                    hostid=options.hostid, hostname=options.hostname,
                    use_cache=(not options.nocache))
        print_packages_diff(additional_pkg, missing_pkg)

    sys.exit(0)

